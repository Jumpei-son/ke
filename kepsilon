module mod_turbulence
  implicit none
  ! モデル定数
  real, parameter :: ce1 = 1.44, ce2 = 1.92, ce3 = 1.0
  real, parameter :: sigma_k = 1.0, sigma_e = 1.3, sigma_b = 1.0
  real, parameter :: cmu = 0.09
  real, parameter :: rho0 = 1000.0  ! 基準密度 [kg/m^3]
  real, parameter :: g = 9.8        ! 重力加速度 [m/s^2]
contains

  subroutine solve_k_epsilon(k, e, u, w, rho, dx, dz, dt, nx, nz)
    implicit none
    integer, intent(in) :: nx, nz
    real, intent(in) :: dx, dz, dt
    real, intent(inout) :: k(0:nx+1,0:nz+1), e(0:nx+1,0:nz+1)
    real, intent(in) :: u(0:nx+1,0:nz+1), w(0:nx+1,0:nz+1)
    real, intent(in) :: rho(0:nx+1,0:nz+1)

    real :: dkdt, dedt, D, Pk, d_delta_dz
    real :: du_dx, du_dz, dw_dx, dw_dz, S2, delta
    real :: adv_k, adv_e, diff_k, diff_e, buoy_k, buoy_e
    integer :: i, kidx

    do i = 1, nx
      do kidx = 1, nz

        ! 渦動粘性係数
        if (e(i,kidx) > 1.0e-8) then
          D = cmu * k(i,kidx)**2 / e(i,kidx)
        else
          D = 0.0
        end if

        ! 速度勾配によるせん断生成項 S^2
        du_dx = (u(i+1,kidx) - u(i-1,kidx)) / (2.0 * dx)
        du_dz = (u(i,kidx+1) - u(i,kidx-1)) / (2.0 * dz)
        dw_dx = (w(i+1,kidx) - w(i-1,kidx)) / (2.0 * dx)
        dw_dz = (w(i,kidx+1) - w(i,kidx-1)) / (2.0 * dz)

        S2 = 2.0 * (du_dx**2 + dw_dz**2 + 0.5*(du_dz + dw_dx)**2)
        Pk = D * S2

        ! 浮力項（密度勾配による浮力生成）
        d_delta_dz = ((rho0 - rho(i,kidx+1))/rho0 - (rho0 - rho(i,kidx-1))/rho0) / (2.0*dz)
        buoy_k = sigma_b * g * d_delta_dz
        if (k(i,kidx) > 1.0e-8) then
          buoy_e = ce3 * sigma_b * g * d_delta_dz * e(i,kidx) / k(i,kidx)
        else
          buoy_e = 0.0
        end if

        ! ---- k方程式 ----
        adv_k = - u(i,kidx) * (k(i,kidx) - k(i-1,kidx)) / dx  &
                - w(i,kidx) * (k(i,kidx) - k(i,kidx-1)) / dz

        diff_k = D / sigma_k * ( &
                  (k(i+1,kidx) - 2.0*k(i,kidx) + k(i-1,kidx)) / dx**2 + &
                  (k(i,kidx+1) - 2.0*k(i,kidx) + k(i,kidx-1)) / dz**2 )

        dkdt = adv_k + diff_k + Pk + buoy_k - e(i,kidx)

        ! ---- ε方程式 ----
        adv_e = - u(i,kidx) * (e(i,kidx) - e(i-1,kidx)) / dx  &
                - w(i,kidx) * (e(i,kidx) - e(i,kidx-1)) / dz

        diff_e = D / sigma_e * ( &
                   (e(i+1,kidx) - 2.0*e(i,kidx) + e(i-1,kidx)) / dx**2 + &
                   (e(i,kidx+1) - 2.0*e(i,kidx) + e(i,kidx-1)) / dz**2 )

        dedt = adv_e + diff_e + ce1 * Pk * e(i,kidx) / k(i,kidx) &
                - ce2 * e(i,kidx)**2 / k(i,kidx) + buoy_e

        ! 時間積分（Euler）
        k(i,kidx) = max(k(i,kidx) + dt * dkdt, 1.0e-10)
        e(i,kidx) = max(e(i,kidx) + dt * dedt, 1.0e-10)

      end do
    end do
  end subroutine solve_k_epsilon

end module mod_turbulence
